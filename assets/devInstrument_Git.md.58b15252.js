import{_ as s,c as a,o as n,a as e}from"./app.464941dd.js";const t="/MarkDownImage/冲突处理.jpg",l="/MarkDownImage/变基前.jpg",i="/MarkDownImage/变基后.jpg",A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"配置Git","slug":"配置git","link":"#配置git","children":[]},{"level":2,"title":"Git文件状态","slug":"git文件状态","link":"#git文件状态","children":[]},{"level":2,"title":"Git的基本使用","slug":"git的基本使用","link":"#git的基本使用","children":[]},{"level":2,"title":"Git的常用命令","slug":"git的常用命令","link":"#git的常用命令","children":[]},{"level":2,"title":"Git分支","slug":"git分支","link":"#git分支","children":[{"level":3,"title":"Git变基（rebase）","slug":"git变基-rebase","link":"#git变基-rebase","children":[]}]},{"level":2,"title":"远程仓库","slug":"远程仓库","link":"#远程仓库","children":[{"level":3,"title":"远端库的操作","slug":"远端库的操作","link":"#远端库的操作","children":[]}]},{"level":2,"title":"Git标签","slug":"git标签","link":"#git标签","children":[{"level":3,"title":"分离head指针","slug":"分离head指针","link":"#分离head指针","children":[]},{"level":3,"title":"标签","slug":"标签","link":"#标签","children":[]}]},{"level":2,"title":"Gitignore","slug":"gitignore","link":"#gitignore","children":[]},{"level":2,"title":"友情提示","slug":"友情提示","link":"#友情提示","children":[]}],"relativePath":"devInstrument/Git.md","lastUpdated":1676820537000}'),p={name:"devInstrument/Git.md"},r=e(`<h1 style="text-align:center;">Git的使用教程</h1><h2 id="配置git" tabindex="-1">配置Git <a class="header-anchor" href="#配置git" aria-hidden="true">#</a></h2><p>​  git通过配置的用户和邮箱对提交的进行标识，表明代码是谁提交的。</p><ul><li>配置全局用户</li></ul><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git config --global user.name &quot;NickWiber&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>配置全局邮箱</li></ul><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git config --global user.email &quot;xxxxxxxxxxxx@qq.com&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="git文件状态" tabindex="-1">Git文件状态 <a class="header-anchor" href="#git文件状态" aria-hidden="true">#</a></h2><p>Git中文件有两种状态已跟踪和未跟踪；其中已跟踪有三种状态，暂存、已修改、未修改。</p><p>暂存：代码已修改并保存，但是未提交到git仓库。</p><p>已修改：标识文件已修改，和仓库中的文件不同。</p><p>未修改：标识磁盘中的文件和git仓库中文件相同，没有修改。</p><p>以上状态可以通过git status查看。</p><h2 id="git的基本使用" tabindex="-1">Git的基本使用 <a class="header-anchor" href="#git的基本使用" aria-hidden="true">#</a></h2><ol><li><p>git status</p><p>查看git仓库的状态</p></li><li><p>git init</p><p>仓库初始化，会添加一个<code>.git</code> 的隐藏文件夹。</p></li><li><p>git add 文件名</p><p>文件名可以用*来表示，代表把该目录先所有文件都进行管理，将项目中的文件让git进行管理即将文件切换到暂存状态。</p></li><li><p>git commit [-a] -m &quot;提交信息&quot;</p><ul><li>将暂存的文件存储到仓库中，文件状态有暂存-------&gt;未修改，修改文件后文件状态会变成修改状态。</li><li>git commit -a -m &quot;xxxxxx&quot;,提交所有已修改的文件，未跟踪的文件不会提交。</li></ul></li><li><p>git log</p><p>查看代码操作记录。</p></li></ol><h2 id="git的常用命令" tabindex="-1">Git的常用命令 <a class="header-anchor" href="#git的常用命令" aria-hidden="true">#</a></h2><ol><li><p>git restore [fileName、*]</p><p>回退项目到之前的版本，使用*表示所有文件进行回退。</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git restore &lt;fileName&gt; //版本回退</span></span>
<span class="line"><span style="color:#A6ACCD;">git restore *</span></span>
<span class="line"><span style="color:#A6ACCD;">git restore --stage &lt;fileName&gt;  //取消暂存状态，不会取消操作</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>git rm</p><p>删除文件。 删除前需要将已修改的文件进行提交，对未提交的文件进行删除会报错，但可以使用-f强制删除进行删除。</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git rm &lt;fileName&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">git rm &lt;fileName&gt; -f //强制删除</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>git mv</p><p>移动文件。</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git mv [from] [to]  				//移动文件or重命名文件</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h2 id="git分支" tabindex="-1">Git分支 <a class="header-anchor" href="#git分支" aria-hidden="true">#</a></h2><p>  Git在存储文件时，每一次提交文件都会创建一个对应的节点，通过节点来记录代码的当前状态。节点会构成一个树状结构，树状结构就意味着存在分支，默认仓库中只有一个分支，即master分支。在实际操作中可以创建多个分支，分支与分支之间相互独立，对分支的修改不会影响主分支。</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git branch		//查看当前分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch &lt;name&gt;		//创建分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch -d &lt;name&gt;	//删除分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git switch &lt;name&gt; 		//切换分支命令1</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout &lt;name&gt;		//切换分支命令2</span></span>
<span class="line"><span style="color:#A6ACCD;">git switch -c &lt;name&gt;	//创建并切换分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch -m &lt;name&gt;	//修改当前分支名</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>  在开发中都是在自己的分支中修改代码，修改完成后，将自己的分支合并到组分支中。</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git merge &lt;brantchName&gt;		//快速合并分支，直接将master指针移到								最新的分支处</span></span>
<span class="line"><span style="color:#A6ACCD;">git brantch -d &lt;brantchName&gt;	//删除分支</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>  如果在合并分支的过程中，出现了冲突，即分支和master中都修改了同一个文件，那么在合并分支的过程中就会出现冲突，就不能快速合并分支，需要手动处理分支，根据需要选择保留master中的内容or分支中的内容ormaster和分支中的内容均保留，也可以通过VSCode中的选项进行修改，然后再进行commit提交。</p><p><img src="`+t+'" alt="冲突处理"></p><h3 id="git变基-rebase" tabindex="-1">Git变基（rebase） <a class="header-anchor" href="#git变基-rebase" aria-hidden="true">#</a></h3><p>  在开发中还可以通过变基来合并分支。</p><p>  通过merge合并分支，会将分支的创建、合并等操作记录全部显示出来，在实际开发过程中，开发人员很多，就会出现很多的分支操作，使得代码的提交记录很混乱。</p><p><img src="'+l+'" alt="变基前"></p><p><img src="'+i+`" alt="变基后"></p><p>  在变基前，update分支的base为C4，通过变基可以将base从C4变为C8，C5和C6就与C8在一条分支上面，就可以使用快速合并， 就不会产生多余的记录。</p><p>原理（变基时发生了什么）：</p><ol><li>当我们发起变基的操作时，git会首先找到两条分支最近的公共祖先</li><li>对比当前分支先对于祖先的历史提交（相对于祖先做了那些更新或者改变），并将他们提取出来保存在一个临时文件中</li><li>将当前部分指向基底</li><li>以新基底为起点，从新执行临时文件中的历史改变</li></ol><p>变基的操作过程：</p><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git switch xxx				//切换到分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git rebases master			//变基</span></span>
<span class="line"><span style="color:#A6ACCD;">							//有冲突则处理冲突</span></span>
<span class="line"><span style="color:#A6ACCD;">git commit					//提交更改</span></span>
<span class="line"><span style="color:#A6ACCD;">git switch master			//切换回master分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git merge xxxxx				//快速合并</span></span>
<span class="line"><span style="color:#A6ACCD;">git branch -d xxx			//删除原分支</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>  变基和merge对于合并分支来说结果是一样的，但是变基会使提交记录更加整洁，大部分情况下合并和变基可以互换，但是如果分支已经提交给了远端仓库，那么这时候尽量不使用变基，代码要在本地仓库完成变基之后再上传。</p><h2 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a></h2><p>  远程仓库和本地仓库没有区别，区别在于远程仓库可以被其他开发者查看。在实际开发中，git服务器通常是由公司搭建内部使用或者购买一些公共的私有服务器。常用的公共git仓库由：GitHub和Gitee（码云）</p><h3 id="远端库的操作" tabindex="-1">远端库的操作 <a class="header-anchor" href="#远端库的操作" aria-hidden="true">#</a></h3><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git remote							//显示出当前关联的远程仓库</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote add &lt;远端仓库名称&gt; &lt;url&gt;	//关联远端仓库，其中远端仓库的名称可以自定，一般使用origion</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote remove &lt;远端仓库名称&gt;		//删除远端仓库</span></span>
<span class="line"><span style="color:#A6ACCD;">git push -u &lt;远端仓库名称&gt; &lt;分支名&gt;		//和向远端仓库推送代码，并和当前分支关联起来</span></span>
<span class="line"><span style="color:#A6ACCD;">git push &lt;远端仓库&gt; &lt;本地分支&gt;:&lt;远程分支&gt;	//将本地分支推送到远端仓库的&lt;远端分支&gt;中</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone &lt;远端仓库URL&gt;				//从远端仓库下载代码</span></span>
<span class="line"><span style="color:#A6ACCD;">git push 							//推送本地仓库代码到远端仓库，如果本地仓库代码版本低于远端仓库，则会推送失败</span></span>
<span class="line"><span style="color:#A6ACCD;">git featch							//在本地代码版本低于远端仓库的版本的情况下，想要成功推送则需要获取到远端最新的代码，使用										featch不会将下载的代码和本地代码合并，需要手动使用git mergy命令进行合并</span></span>
<span class="line"><span style="color:#A6ACCD;">git pull							//该命令同样用于获取远端的代码，次命令会自动合并代码</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><em><strong>注意</strong></em>：<strong>在推送代码之前一定要先从远程仓库中拉取新的代码</strong></p><h2 id="git标签" tabindex="-1">Git标签 <a class="header-anchor" href="#git标签" aria-hidden="true">#</a></h2><h3 id="分离head指针" tabindex="-1">分离head指针 <a class="header-anchor" href="#分离head指针" aria-hidden="true">#</a></h3><ul><li>Git中默认head指针在随着代码的提交会自动指向master，但是如果代码需要回退到某个特定的版本，则需要使用<code>git switch</code>命令进行切换，同时还需要带上<code>--detach</code>参数，进行head指针的分离，才能回退成功。在分离头指针的情况下，也可以操作代码，但是这些操作并不会出现在任何分支上。尽量不要在分离头指针的情况下对仓库进行操作。</li><li>如果一定要回到前面的版本的代码进行操作，可以选择创建分支后再操作：<code>git switch -c &lt;分支名&gt; &lt;提交ID&gt;</code>。</li></ul><div class="language-git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git switch &lt;提交ID&gt; --detach</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="标签" tabindex="-1">标签 <a class="header-anchor" href="#标签" aria-hidden="true">#</a></h3><p>可以为提交记录打上标签，方便快速切回和查找。</p><div class="language-Git line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git tag									//查看全部的标签</span></span>
<span class="line"><span style="color:#A6ACCD;">git tag 标签名								//为当前所在的节点打上标签</span></span>
<span class="line"><span style="color:#A6ACCD;">git tag 标签名 提交ID						//为特定的提交版本打上标签</span></span>
<span class="line"><span style="color:#A6ACCD;">git push 远程仓库 标签名					//将指定标签提交到远程仓库</span></span>
<span class="line"><span style="color:#A6ACCD;">git push 远程仓库 --tags					//推送所有标签到远程仓库</span></span>
<span class="line"><span style="color:#A6ACCD;">git tag -d 标签名							//删除标签</span></span>
<span class="line"><span style="color:#A6ACCD;">git push 远程仓库 --delete 标签名			//删除远仓库的标签</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="gitignore" tabindex="-1">Gitignore <a class="header-anchor" href="#gitignore" aria-hidden="true">#</a></h2><p>  默认情况下git会监视项目文件夹中的所有文件，但是有的文件不需要被监视或者被上传到git中比如node_modules，则可以在项目中创建一个名叫<code>.gitignore</code>的文件，在里面写上忽略的文件名或者文件地址即可。</p><h2 id="友情提示" tabindex="-1">友情提示 <a class="header-anchor" href="#友情提示" aria-hidden="true">#</a></h2><p>  都看到这儿了，是不是一根直肠通大脑，学到多少拉多少,以上命令是不是记不住？这不解决方法来了嘛。使用<a href="https://tortoisegit.org/" title="TortoiseGit官网" target="_blank" rel="noreferrer">TortoiseGit</a>图形化操作界面，你只管点就行了，而且还有中文语言包哦！！！！</p>`,51),c=[r];function o(d,g,h,u,b,m){return n(),a("div",null,c)}const y=s(p,[["render",o]]);export{A as __pageData,y as default};
